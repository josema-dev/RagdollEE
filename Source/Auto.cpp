/******************************************************************************/
#include "stdafx.h"
#include "@@headers.h"
/******************************************************************************/
// THIS IS AN AUTOMATICALLY GENERATED FILE
// THIS FILE WAS GENERATED BY ESENTHEL EDITOR, ACCORDING TO PROJECT SETTINGS
/******************************************************************************/
// CONSTANTS
/******************************************************************************/
#define    STEAM   0 // if Application properties have Steam enabled
#define    OPEN_VR 0 // if Application properties have OpenVR enabled
const bool EE_PUBLISH          =true; // this is set to true when compiling for publishing
const bool EE_ENGINE_EMBED     =(false && !WINDOWS_NEW && !MOBILE && !WEB); // this is set to true when "Embed Engine Data" was enabled in application settings, this is always disabled for WindowsNew, Mobile and Web builds
const bool EE_ANDROID_EXPANSION=false; // this is set to true when auto-download of Android Expansion Files is enabled
cchar *C   EE_ENGINE_PATH      =((WINDOWS_NEW || MOBILE || WEB) ? u"Engine.pak"  : EE_PUBLISH ? u"Bin/Engine.pak"  : u"ESENTHEL_ENGINE_INSTALL_PATH/Bin/Engine.pak");
cchar *C   EE_PROJECT_PATH     =((WINDOWS_NEW || MOBILE || WEB) ? u"Project.pak" : EE_PUBLISH ? u"Bin/Project.pak" : u"ESENTHEL_ENGINE_PROJECT_PATH/Game");
cchar *C   EE_PROJECT_NAME     =u"Tutorials";
cchar *C   EE_APP_NAME         =u"MyRagdoll";
const UID  EE_GUI_SKIN         =UID(0, 0, 0, 0);
Cipher *C  EE_PROJECT_CIPHER   =null;
/******************************************************************************/
// FUNCTIONS
/******************************************************************************/
void EE_INIT(bool load_engine_data, bool load_project_data)
{
   App.name(EE_APP_NAME); // set application name
   EE_INIT_OBJ_TYPE(); // initialize object type enum
   LoadEmbeddedPaks(EE_PROJECT_CIPHER); // load data embedded in Application executable file
   if(load_engine_data )if(!EE_ENGINE_EMBED)Paks.add(EE_ENGINE_PATH); // load engine data
   if(load_project_data) // load project data
   {
      if(WINDOWS_NEW || MOBILE || WEB || EE_PUBLISH)Paks.add(EE_PROJECT_PATH, EE_PROJECT_CIPHER);else DataPath(EE_PROJECT_PATH);
      if(ANDROID && EE_ANDROID_EXPANSION)
      {
         REP(EE_APP_BUILD+1)if(Paks.addTry(AndroidExpansionFileName(i), EE_PROJECT_CIPHER))goto added;
         Exit("Can't load Project Data");
      added:;
      }
   }
}
void EE_INIT_OBJ_TYPE() // this function will setup 'ObjType' enum used for object types
{
   Enum::Elm elms[]= // list of Editor created Object Classes
   {
      {"OBJ_CHR"         , UID(3377718608, 1157290285, 1449883574, 2193875233)},
      {"OBJ_DESTRUCTIBLE", UID(3862197110, 1100685637, 2030254268, 2407228583)},
      {"OBJ_ITEM"        , UID(1347336143, 1270230391, 3653824415, 3844916636)},
      {"OBJ_LIGHT_POINT" , UID(3609005105, 1118058365, 577565335, 3982143695)},
      {"OBJ_PARTICLES"   , UID(2721776529, 1227196451, 2852647815, 3333460217)},
   };
   ObjType.create("OBJ_TYPE", elms); // create 'ObjType' enum
}
/******************************************************************************/
// ENUMS
/******************************************************************************/

/******************************************************************************/
